unit TestObj.IDiscount;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, Obj.SSI.Discount;

type
  // Test methods for class IDiscount

  TestIDiscount = class(TTestCase)
  strict private
    FIDiscount: IDiscount;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAsCurrencyEquals100;
    procedure TestAsICurrencyEquals100;
    procedure TestAsStringEqualsFormated100;
    procedure TestAdd20percentEquals120;
    procedure TestAdd0Equals100;
    procedure TestSub15percentEquals85;
    procedure TestSub0Equals100;
    procedure TestAddValue12Equals112;
    procedure TestAddValue0Equals100;
    procedure TestSubValue7Equals93;
    procedure TestSubValue0Equals100;
  end;

implementation

uses
    SysUtils
  , Obj.SSI.Currency
  ;

procedure TestIDiscount.SetUp;
begin
     FIDiscount := TDiscount.New(100);
end;

procedure TestIDiscount.TearDown;
begin
     FIDiscount := nil;
end;

procedure TestIDiscount.TestAsCurrencyEquals100;
var
   ExpectedValue, ReturnValue: Currency;
begin
     ExpectedValue := 100;
     ReturnValue   := FIDiscount.AsCurrency;
     CheckEquals(ExpectedValue, ReturnValue);
end;

procedure TestIDiscount.TestAsICurrencyEquals100;
var
   ExpectedValue, ReturnValue: Currency;
begin
     ExpectedValue := TCurrency.New(100).AsCurrency;
     ReturnValue   := FIDiscount.AsICurrency.AsCurrency;
     CheckEquals(ExpectedValue, ReturnValue);
end;

procedure TestIDiscount.TestAsStringEqualsFormated100;
var
   ExpectedValue, ReturnValue: string;
begin
     ExpectedValue := Format('100%s00 €', [FormatSettings.DecimalSeparator]);
     ReturnValue   := FIDiscount.AsString;
     CheckEquals(ExpectedValue, ReturnValue);
end;

procedure TestIDiscount.TestSub0Equals100;
var
   ExpectedValue, ReturnValue: Currency;
begin
     ExpectedValue := 100;
     ReturnValue   := FIDiscount.Sub(0).AsCurrency;
     CheckEquals(ExpectedValue, ReturnValue);
end;

procedure TestIDiscount.TestSub15percentEquals85;
var
   ExpectedValue, ReturnValue: Currency;
   Value: Single;
begin
     Value         := 15;
     ExpectedValue := 85;
     ReturnValue   := FIDiscount.Sub(Value).AsCurrency;
     CheckEquals(ExpectedValue, ReturnValue);
end;

procedure TestIDiscount.TestSubValue0Equals100;
var
   ExpectedValue, ReturnValue: Currency;
   Value: Single;
begin
     Value         := 0;
     ExpectedValue := 100;
     ReturnValue   := FIDiscount.SubValue(Value).AsCurrency;
     CheckEquals(ExpectedValue, ReturnValue);
end;

procedure TestIDiscount.TestSubValue7Equals93;
var
   ExpectedValue, ReturnValue: Currency;
   Value: Single;
begin
     Value         := 7;
     ExpectedValue := 93;
     ReturnValue   := FIDiscount.SubValue(Value).AsCurrency;
     CheckEquals(ExpectedValue, ReturnValue);
end;

procedure TestIDiscount.TestAdd20percentEquals120;
var
   ExpectedValue, ReturnValue: Currency;
   Value: Single;
begin
     Value         := 20;
     ExpectedValue := 120;
     ReturnValue   := FIDiscount.Add(Value).AsCurrency;
     CheckEquals(ExpectedValue, ReturnValue);
end;

procedure TestIDiscount.TestAddValue0Equals100;
var
   ExpectedValue, ReturnValue: Currency;
   Value: Single;
begin
     Value         := 0;
     ExpectedValue := 100;
     ReturnValue   := FIDiscount.SubValue(Value).AsCurrency;
     CheckEquals(ExpectedValue, ReturnValue);
end;

procedure TestIDiscount.TestAddValue12Equals112;
var
   ExpectedValue, ReturnValue: Currency;
   Value: Single;
begin
     Value         := 12;
     ExpectedValue := 112;
     ReturnValue   := FIDiscount.AddValue(Value).AsCurrency;
     CheckEquals(ExpectedValue, ReturnValue);
end;

procedure TestIDiscount.TestAdd0Equals100;
var
   ExpectedValue, ReturnValue: Currency;
begin
     ExpectedValue := 100;
     ReturnValue   := FIDiscount.Add(0).AsCurrency;
     CheckEquals(ExpectedValue, ReturnValue);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestIDiscount.Suite);
end.

