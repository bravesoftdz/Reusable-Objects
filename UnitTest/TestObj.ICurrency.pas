unit TestObj.ICurrency;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Obj.Currency;

type
  // Test methods for class ICurrency

  TestICurrency = class(TTestCase)
  strict private
    FICurrency: ICurrency;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAsCurrencyEquals5;
    procedure TestAsStringEqualsFormated5;
    procedure TestAdd10_50Equals15_50;
    procedure TestAddMinus8_25EqualsMinus3_25;
    procedure TestAdd0Equals5;
    procedure TestResetEquals0;
  end;

implementation

procedure TestICurrency.SetUp;
begin
     FICurrency := TCurrency.New(5);
end;

procedure TestICurrency.TearDown;
begin
     FICurrency := nil;
end;

procedure TestICurrency.TestAsCurrencyEquals5;
var
   ExpectedValue, ReturnValue: Currency;
begin
     ExpectedValue := 5;
     ReturnValue   := FICurrency.AsCurrency;
     CheckEquals(ExpectedValue, ReturnValue);
end;

procedure TestICurrency.TestAsStringEqualsFormated5;
var
   ExpectedValue, ReturnValue: string;
begin
     ExpectedValue := '5.00 €';
     ReturnValue   := FICurrency.AsString;
     CheckEquals(ExpectedValue, ReturnValue);
end;

procedure TestICurrency.TestAdd0Equals5;
var
   ExpectedValue, ReturnValue, Value: Currency;
begin
     Value         := 0;
     ExpectedValue := 5;
     ReturnValue   := FICurrency.Add(Value).AsCurrency;
     CheckEquals(ExpectedValue, ReturnValue);
end;

procedure TestICurrency.TestAdd10_50Equals15_50;
var
   ExpectedValue, ReturnValue, Value: Currency;
begin
     Value         := 10.50;
     ExpectedValue := 15.50;
     ReturnValue   := FICurrency.Add(Value).AsCurrency;
     CheckEquals(ExpectedValue, ReturnValue);
end;

procedure TestICurrency.TestAddMinus8_25EqualsMinus3_25;
var
   ExpectedValue, ReturnValue, Value: Currency;
begin
     Value         := -8.25;
     ExpectedValue := -3.25;
     ReturnValue   := FICurrency.Add(Value).AsCurrency;
     CheckEquals(ExpectedValue, ReturnValue);
end;

procedure TestICurrency.TestResetEquals0;
var
   ExpectedValue, ReturnValue: Currency;
begin
     ExpectedValue := 0;
     ReturnValue   := FICurrency.Reset.AsCurrency;
     CheckEquals(ExpectedValue, ReturnValue);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestICurrency.Suite);
end.

